package Vector_Quantization;


//import //java.util.concurrent.Semaphore;
import java.util.*;
import java.util.concurrent.Semaphore;
import java.util.logging.Level;
import java.util.logging.Logger;
public class buffer {
	
	private String buff;
	private int Numberofreaderthreads=0;
	private int NumberofWriterthreads=0;
	Semaphore writers=new Semaphore (1);
	public buffer (){
		buff="";
		
	}
	public buffer (String initialtext){
		buff=initialtext;
	}
	
	public void read (){
		System.out.println("Start reading");
		while(NumberofWriterthreads!=0){
			System.out.println("blocked");
		}
		while (NumberofWriterthreads!=0){}
		Numberofreaderthreads++;
		
		System.out.println("Read: "+buff);
		System.out.println("finish Reading");
		Numberofreaderthreads--;
 	}
 
	public void write(String text){
		System.out.println("start writing");
 		try {
			if(NumberofWriterthreads>1){
				writers.acquire();//wait
			}
		}catch(InterruptedException ex){
			Logger.getLogger(buffer.class.getName()).log(Level.SEVERE, null, ex);
		}
		while (NumberofWriterthreads!=0){}
		NumberofWriterthreads++;
		buff+=text;
		System.out.println("write: "+buff);
		System.out.println(" Finished Writing " );
		NumberofWriterthreads--;
		if(NumberofWriterthreads>0||Numberofreaderthreads>0){
			System.out.println(" blocked " );}
			writers.release();//notify 
		
	}

}
