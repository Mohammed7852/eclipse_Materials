'''
Created on Apr 4, 2016

@author: mohamed ali shabanah
'''
from collections import __main__
from _tkinter import create
from Assignments.Buzzel import create_node, move_left, move_right, move_up,\
    move_down

"""Search (Chapters 3-4)

The way to use this code is to subclass Problem to create a class of problems,
then create problem instances and solve them with calls to the various search
functions."""

from utils import *
import math, random, sys, time, bisect, string

start=['.','.','-','-','-','-','-','-','-',
       '-','.','-','-','-','-','-','-','-',
       '-','.','-','-','.','.','.','-','-',
       '-','.','-','-','.','-','.','-','-',
       '-','.','.','.','.','-','.','-','-',
       '-','-','-','-','-','-','.','-','-']
goal_index  =51

goal = ['X','X','-','-','-','-','-','-','-',
       '-','X','-','-','-','-','-','-','-',
       '-','X','-','-','X','X','X','-','-',
       '-','X','-','-','X','-','X','-','-',
       '-','X','X','X','X','-','X','-','-',
       '-','-','-','-','-','-','X','-','-']




#______________________________________________________________________________

class Problem(object):
    """The abstract class for a formal problem.  You should subclass
    this and implement the methods actions and result, and possibly
    __init__, goal_test, and path_cost. Then you will create instances
    of your subclass and solve them with the various search functions."""

    def __init__(self, initial, goal=None):
        """The constructor specifies the initial state, and possibly a goal
        state, if there is a unique goal.  Your subclass's constructor can add
        other arguments."""
        self.initial = initial; self.goal = goal

    def actions(self, state):
        """Return the actions that can be executed in the given
        state. The result would typically be a list, but if there are
        many actions, consider yielding them one at a time in an
        iterator, rather than building them all at once."""
       

    def result(self, state, action):
        """Return the state that results from executing the given
        action in the given state. The action must be one of
        self.actions(state)."""
       

    def goal_test(self, state):
        """Return True if the state is a goal. The default method compares the
        state to self.goal, as specified in the constructor. Override this
        method if checking against a single self.goal is not enough."""
        return state == self.goal

    def path_cost(self, c, state1, action, state2):
        """Return the cost of a solution path that arrives at state2 from
        state1 via action, assuming cost c to get up to state1. If the problem
        is such that the path doesn't matter, this function will only look at
        state2.  If the path does matter, it will consider c and maybe state1
        and action. The default method costs 1 for every step in the path."""
        return c + 1

    def value(self, state):
        """For optimization problems, each state has a value.  Hill-climbing
        and related algorithms try to maximize this value."""
       
#______________________________________________________________________________

class Node:
    """A node in a search tree. Contains a pointer to the parent (the node
    that this is a successor of) and to the actual state for this node. Note
    that if a state is arrived at by two paths, then there are two nodes with
    the same state.  Also includes the action that got us to this state, and
    the total path_cost (also known as g) to reach the node.  Other functions
    may add an f and h value; see best_first_graph_search and astar_search for
    an explanation of how the f and h values are handled. You will not need to
    subclass this class."""

    def __init__(self, state, parent=None, action=None, path_cost=0):
        "Create a search tree Node, derived from a parent by an action."
        update(self, state=state, parent=parent, action=action,
               path_cost=path_cost, depth=0)
        if parent:
            self.depth = parent.depth + 1

    def __repr__(self):
        return "<Node %s>" % (self.state,)

    def expand(self, problem):
        "List the nodes reachable in one step from this node."
        return [self.child_node(problem, action)
                for action in problem.actions(self.state)]

    def child_node(self, problem, action):
        "Fig. 3.10"
        next = problem.result(self.state, action)
        return Node(next, self, action,
                    problem.path_cost(self.path_cost, self.state, action, next))

    def solution(self):
        "Return the sequence of actions to go from the root to this node."
        return [node.action for node in self.path()[1:]]

    def path(self):
        "Return a list of nodes forming the path from the root to this node."
        node, path_back = self, []
        while node:
            path_back.append(node)
            node = node.parent
        return list(reversed(path_back))

    # We want for a queue of nodes in breadth_first_search or
    # astar_search to have no duplicated states, so we treat nodes
    # with the same state as equal. [Problem: this may not be what you
    # want in other contexts.]

    def __eq__(self, other):
        return isinstance(other, Node) and self.state == other.state

    def __hash__(self):
        return hash(self.state)

#______________________________________________________________________________

class SimpleProblemSolvingAgentProgram:
    """Abstract framework for a problem-solving agent. [Fig. 3.1]"""
    def __init__(self, initial_state=None):
        update(self, state=initial_state, seq=[])

    def __call__(self, percept):
        self.state = self.update_state(self.state, percept)
        if not self.seq:
            goal = self.formulate_goal(self.state)
            problem = self.formulate_problem(self.state, goal)
            self.seq = self.search(problem)
            if not self.seq: return None
        return self.seq.pop(0)

    def update_state(self, percept):
       print()

    def formulate_goal(self, state):
       print()

    def formulate_problem(self, state, goal):
       print()

    def search(self, problem):
        print()

#______________________________________________________________________________
# Uninformed Search algorithms

def tree_search(problem, open):
    """Search through the successors of a problem to find a goal.
    The argument frontier should be an empty queue.
    Don't worry about repeated paths to a state. [Fig. 3.7]"""
    open.append(Node(problem.initial))
    while open:
        node = open.pop()
        if problem.goal_test(node.state):
            return node
        open.extend(node.expand(problem))
    return None


    
def graph_search(problem, frontier):
    """Search through the successors of a problem to find a goal.
    The argument frontier should be an empty queue.
    If two paths reach a state, only use the first one. [Fig. 3.7]"""
    frontier.append(Node(problem.initial))
    explored = set()
    while frontier:
        node = frontier.pop()
        if problem.goal_test(node.state):
            return node
        explored.add(node.state)
        frontier.extend(child for child in node.expand(problem)
                        if child.state not in explored
                        and child not in frontier)
    return None

def breadth_first_tree_search(problem):
    "Search the shallowest nodes in the search tree first."
    return tree_search(problem, FIFOQueue())

def depth_first_tree_search(problem):
    "Search the deepest nodes in the search tree first."
    return tree_search(problem, Stack())

def depth_first_graph_search(problem):
    "Search the deepest nodes in the search tree first."
    return graph_search(problem, Stack())

def breadth_first_search(problem):
    "[Fig. 3.11]"
    node = Node(problem.initial)
    if problem.goal_test(node.state):
        return node
    frontier = FIFOQueue()
    frontier.append(node)
    explored = set()
    while frontier:
        node = frontier.pop()
        explored.add(node.state)
        for child in node.expand(problem):
            if child.state not in explored and child not in frontier:
                if problem.goal_test(child.state):
                    return child
                frontier.append(child)
    return None

def best_first_graph_search(problem, f):
    """Search the nodes with the lowest f scores first.
    You specify the function f(node) that you want to minimize; for example,
    if f is a heuristic estimate to the goal, then we have greedy best
    first search; if f is node.depth then we have breadth-first search.
    There is a subtlety: the line "f = memoize(f, 'f')" means that the f
    values will be cached on the nodes as they are computed. So after doing
    a best first search you can examine the f values of the path returned."""
    f = memoize(f, 'f')
    node = Node(problem.initial)
    if problem.goal_test(node.state):
        return node
    frontier = PriorityQueue(min, f)
    frontier.append(node)
    explored = set()
    while frontier:
        node = frontier.pop()
        if problem.goal_test(node.state):
            return node
        explored.add(node.state)
        for child in node.expand(problem):
            if child.state not in explored and child not in frontier:
                frontier.append(child)
            elif child in frontier:
                incumbent = frontier[child]
                if f(child) < f(incumbent):
                    del frontier[incumbent]
                    frontier.append(child)
    return None

def uniform_cost_search(problem):
    "[Fig. 3.14]"
    return best_first_graph_search(problem, lambda node: node.path_cost)

def depth_limited_search(problem, limit=50):
    "[Fig. 3.17]"
    def recursive_dls(node, problem, limit):
        if problem.goal_test(node.state):
            return node
        elif node.depth == limit:
            return 'cutoff'
        else:
            cutoff_occurred = False
            for child in node.expand(problem):
                result = recursive_dls(child, problem, limit)
                if result == 'cutoff':
                    cutoff_occurred = True
                elif result is not None:
                    return result
            return if_(cutoff_occurred, 'cutoff', None)

    # Body of depth_limited_search:
    return recursive_dls(Node(problem.initial), problem, limit)

def iterative_deepening_search(problem):
    '''"[Fig. 3.18]"
    for depth in xrange(sys.maxint()):
        result = depth_limited_search(problem, depth)
        if result != 'cutoff':
            return result'''

#______________________________________________________________________________
# Informed (Heuristic) Search

greedy_best_first_graph_search = best_first_graph_search
    # Greedy best-first search is accomplished by specifying f(n) = h(n).

def astar_search(problem, h=None):
    """A* search is best-first graph search with f(n) = g(n)+h(n).
    You need to specify the h function when you call astar_search, or
    else in your Problem subclass."""
    h = memoize(h or problem.h, 'h')
    return best_first_graph_search(problem, lambda n: n.path_cost + h(n))

#______________________________________________________________________________
# Other search algorithms

def recursive_best_first_search(problem, h=None):
    "[Fig. 3.26]"
    h = memoize(h or problem.h, 'h')

    def RBFS(problem, node, flimit):
        if problem.goal_test(node.state):
            return node, 0   # (The second value is immaterial)
        successors = node.expand(problem)
        if len(successors) == 0:
            return None, infinity
        for s in successors:
            s.f = max(s.path_cost + h(s), node.f)
        while True:
            successors.sort(lambda x,y: cmp(x.f, y.f)) # Order by lowest f value
            best = successors[0]
            if best.f > flimit:
                return None, best.f
            if len(successors) > 1:
                alternative = successors[1].f
            else:
                alternative = infinity
            result, best.f = RBFS(problem, best, min(flimit, alternative))
            if result is not None:
                return result, best.f

    node = Node(problem.initial)
    node.f = h(node)
    result, bestf = RBFS(problem, node, infinity)
    return result

def hill_climbing(problem):
    """From the initial node, keep choosing the neighbor with highest value,
    stopping when no neighbor is better. [Fig. 4.2]"""
    current = Node(problem.initial)
    while True:
        neighbors = current.expand(problem)
        if not neighbors:
            break
        neighbor = argmax_random_tie(neighbors,
                                     lambda node: problem.value(node.state))
        if problem.value(neighbor.state) <= problem.value(current.state):
            break
        current = neighbor
    return current.state

def exp_schedule(k=20, lam=0.005, limit=100):
    "One possible schedule function for simulated annealing"
    return lambda t: if_(t < limit, k * math.exp(-lam * t), 0)

def simulated_annealing(problem, schedule=exp_schedule()):
    "[Fig. 4.5]"
    '''current = Node(problem.initial)
    for t in xrange(sys.maxint):
        T = schedule(t)
        if T == 0:
            return current
        neighbors = current.expand(problem)
        if not neighbors:
            return current
        next = random.choice(neighbors)
        delta_e = problem.value(next.state) - problem.value(current.state)
        if delta_e > 0 or probability(math.exp(delta_e/T)):
            current = next'''

def and_or_graph_search(problem):
    "[Fig. 4.11]"
    unimplemented()

def online_dfs_agent(s1):
    "[Fig. 4.21]"
    unimplemented()

def lrta_star_agent(s1):
    "[Fig. 4.24]"
    unimplemented()

#____________________________________________

class  AmazeProblem(Problem):
    def __init__(self, initialBoard):        
        self.initial = initialBoard
        self.goal = goal

    def actions(self, state ):
        action=[]
        index=state.index('X')
        if state[0]=='.':
            c1=state[1]
            c2=state[9]
            if c1=='.':
                action.append('r' )
            if c2=='.' :
                action.append('d' )
        else :
            if state[index+1]=='.' :
               action.append('r')
            if state[index-1]=='.':
               action.append('l')
            if state[index-9]=='.':
              action.append('u')
            if state[index+9]=='.':
              action.append('d')
        return action        


    def result(self, node, action):  
        nodes=[]  
        index=node.state.index('X')    
        if 'l' in action :
            nodes.append(Node. create_node( move_left( node.state ), node, "l", node.depth + 1, 0 ) )
        
        if 'r' in action :
             nodes.append(Node. create_node( move_right( node.state ), node, "r", node.depth + 1, 0 ) )
        
        if 'u' in action :
             nodes.append(Node. create_node( move_up( node.state ), node, "u", node.depth + 1, 0 ) )
        
        if 'd' in action :
             nodes.append(Node. create_node( move_down( node.state ), node, "d", node.depth + 1, 0 ) )
             
        return nodes     
             
             
    def move_left(self,state):
        index =state.index('X')
        temp=state[index]
        state[index]='.'
        state[index-1]='X'
        return state;
        
    def move_rigth(self,state):
         index =state.index('X')
        temp=state[index]
        state[index]='.'
        state[index-1]='X'
        return state;

    def move_up(self,state):
       
        index =state.index('X')
        temp=state[index]
        state[index]='.'
        state[index-1]='X'
        return state;
     
    def move_down(self,state):
        print()
        index =state.index('X')
        temp=state[index]
        state[index]='.'
        state[index-1]='X'
        return state;
 
    def goal_test(self, state):
        index=state.index('X')
        if index == goal_index:
             return True
        return False 

def heuristic(current):
        i=0 
        counter=0
        while i<len(current):
            if current[i]!=goal[i]:
                counter+=1
            i+=1 
        print("counter=",counter)  

#______________________________________________________________________________

class EightPuzzleProblem(Problem):
    """The problem of sorting 8-puzzles tiles from an initial random shuffle
    to an ordered goal state. A state is represented as a zero-index based 9-element array, where
    a value of c-th entry represents tile in the (c/3)th row and (c%3)th column, and the empty tile
    is given value zero.
    """
    def __init__(self, initialBoard):        
        self.initial = initialBoard
        self.goal = (0,1,2,3,4,5,6,7,8)

    def actions(self, state):
        return []

    def result(self, state, action):        
        return []

    def goal_test(self, state):
        return state == self.goal



def main():
    print("Inside main - Solving Amaze Problem problem")
    
    

 
#______________________________________________________________________________
# Main Function

if __name__ == "__main__":
    main()
    

    


