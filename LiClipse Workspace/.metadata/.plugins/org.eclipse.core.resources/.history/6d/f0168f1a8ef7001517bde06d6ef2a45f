'''
Created on Mar 31, 2016

@author: mohamed ali shabanah
'''
from _overlapped import NULL
from textwrap import indent
 
goal = [1, 8, 7, 2, 0, 6, 3, 4, 5]
initial_state = [1, 2, 3, 8, 0, 4, 7, 6, 5]


def move_right(self,state):
    print()    
    newstate=state[:]
    index=newstate.index(0)
    if index not in [6,7,8]:
        temp=newstate[index+3]
        newstate[index+3]=newstate[index]
        newstate[index]=temp
        return newstate
    else :return None
       
def move_left(self,state):
    print()
    newstate = state[:]
    index=newstate.index(0)
    if index not in [0,1,2]:
        temp=newstate[index-3]
        newstate[index-3]=newstate[index]
        newstate[index]=temp
        return newstate
    else:return None
    
def move_up(self,state):
    print()    
    index=state.index(0)
    newstate=state[:]
    newstate=newstate[:]
    if index not in [0,3,6]:
        temp=newstate[index-1]
        state[index-1]=state[index]
        state[index]=temp
        return newstate
    else: return None
        
def move_down(self,state):
    print()
    newstate=state[:]
    index=newstate.index(0)
    if index not in [2,5,8]:
        temp=newstate[index+1]
        newstate[index+1]=newstate[index]
        newstate[index]=temp
        return newstate
    else :return None
#create Node
def create_node(self,state,parent,action ,depth ,cost):
    return Node(state,parent,action,depth,cost)
#expand Node
def expand_node(self,node,nodes):
    expandesnodes=[]
    expandesnodes.append(self.create_node(self.move_down(node.state),'d',node.depth+1,0))
    expandesnodes.append(self.create_node(self.move_left(node.state),'l',node.depth+1,0))
    expandesnodes.append(self.create_node(self.move_right(node.state),'r',node.depth+1,0))
    expandesnodes.append(self.create_node(self.move_up(node.state),'d',node.depth+1,0))
    expandesnodes=[node for node in expandesnodes if node.state!=None]
    return expandesnodes

def bfs( start, goal ):
    nodes = []
    nodes.append( create_node( start, None, None, 0, 0 ) )
    while True:
         if len( nodes ) == 0: return None
         node = nodes.pop(0)
         if node.state == goal:
            moves = []
            temp = node
            while True:
                moves.insert(0, temp.operator)
                if temp.depth == 1: break
                temp = temp.parent
            return moves                
        # Expand the node and add all the expansions to the front of the stack
         nodes.extend( expand_node( node, nodes ) )

         
class Node:
    def __init__(self,state,parent,action,depth,cost):
         self.state=state
         self.parent=parent
         self.action=action
         self.cost=cost 
         self.depth=depth
         
         
def readfile( filename ):
    f = open( filename )
    data = f.read()
    # Get rid of the newlines
    data = data.strip( "\n" )
    #Break the string into a list using a space as a seperator.
    data = data.split( " " )
    state = []
    for element in data:
        state.append( int( element ) )
    return state


def main():
    print()
    start_state=readfile("foo.txt")
    goal_state = [1, 8, 7, 2, 0, 6, 3, 4, 5]
if __name__ == '__main__':
    main()         
         
         
         
         
         
         
         
         
         
         