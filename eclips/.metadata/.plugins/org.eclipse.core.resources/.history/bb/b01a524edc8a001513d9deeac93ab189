package Arithmatic_coding;

import  java.util.*;
import java.io.*;

public class Decompression {

	private  Double low=0.0 ,  up =1.0 ; 
	private  String  str1= "" , str2  ,str3  ; 
	private  Double  Result  ; 
    private List<Double> problist = new ArrayList();
	private  List<Character> chars = new ArrayList();
	private  List<Double> lower = new ArrayList();
	private  List<Double> upper  = new ArrayList();
	private  Compression comp = new  Compression();
	private int count = 0 ;
	
	/********************************************************/
	 
	public void decompress() throws IOException{
	   
		Reader r = new FileReader ("output.txt");
		BufferedReader br = new  BufferedReader(r);
		String temp = "" ;
		if(br.ready())
		     temp = br.readLine();
		
		System.out.println(temp+"\n");;
		Result = Double.parseDouble(temp);
		
		br.close();
		r  = new FileReader("Dictionary.txt");
		br  = new  BufferedReader(r);
		if(br.ready())
		temp = br.readLine();
		br.close();
		System.out.println(temp+"\n");;
		
		problist.add(0.8);
		problist.add(0.02);
		problist.add(0.18);
		chars.add('A');
		chars.add('B');
		chars.add('C');
		
		
		List<Double> l = new ArrayList();
		List<Double> u = new ArrayList();
		
		comp.compute_rangs(problist, l, u);
		lower = new ArrayList(l);
		upper = new  ArrayList(u);
		l=u= new ArrayList();
		
		//System.out.println("check result ="+check_range(0.99));
		
		
		System.out.println("prob="+problist+"     \nl="+l+"    \nu="+u+"\n");;
		
		
	 }//decompress
	/******************************************************/
	public int  check_range(Double  res){
		 
		res = (res-low)/(up-low);
		System.out.println(res);
		 boolean temp = false ;
		 int index = 1;
		 for(int i=0 ;i<lower.size() ;i++){
			 if(res<lower.get(i)){
				 temp = true;
				 index=i-1;
				 break;
			 } 
 		 }
		 if(!temp){
			 index = lower.size()-1;
		 }
		 System.out.println(index);
		 
		 return index ;
	}
	
	
	public void recursive(List<Double>l , List<Double> u){
		
		int  index  =  check_range(Result);
		str1+=chars.get(index);
		
		
		if(count == 0){
			low = lower.get(index);
			up  = upper.get(index);
		}else{
			low= l.get(index);
			up = u.get(index);
		}
		Double  a  ,b  ; 
		for(int  i=0 ; i<lower.size() ; i++){
			a= low+(up-low)*lower.get(i);
			b= low+(up-low)*upper.get(i);
			l.add(a);
			u.add(b);
		}//for
		
		recursive(l, u);
		
		
	}//recursive
	
}//class

