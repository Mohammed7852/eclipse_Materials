
package Assignmen_2;
public class HeapSort {
//	static int[] data = {6,7,2,1,5,3,4};
	static int[] data = {11,5,4,13,17,21,30};
	
	public static void heapify(int[] a, int len) {
		int start = (len-2)/2; //starting the binary heap
		while (start >= 0) {
			siftDown(a, start, len-1);
			start-=1;
		}
	}
	
	public static void siftDown(int[] a, int start, int end) {
		int root = start;
		while ((root*2+1) <= end) {
			int child = root*2+1;
			if (child+1 <= end && a[child] < a[child+1]) {
				child = child+1;
			}
			if (a[root] < a[child]) { // if child is larger than its parent
				int rootTemp = a[root];
				a[root] = a[child];
				a[child] = rootTemp;
				root = child;
			}else
				return;
		}
	}
	
	public static void heapSort(int[] a, int len) {

		heapify(a,len);
		int end = len - 1;
		while (end>0) { 
			// swap end with start
			int temp = a[end];
			System.out.println(a[0]);
			a[end] = a[0];
			a[0] = temp;
			end-=1;
			siftDown(a,0,end);
		}
	}
	
	public static void main(String[] args) {
		System.out.print("Before heapSort: ");
		
		for (int i=0; i<data.length; i++) {
			System.out.print(data[i] + " ");	
		}
		System.out.println("");
		heapSort(data, data.length);
		
		System.out.print("After heapSort: ");
		for (int i=0; i<data.length; i++) {
			System.out.print(data[i] + " ");	
		}
	}
}

//
//public class HeapSort {
//	
//	public static void main(String a[]) {
//		int i;
//		int arr[] = { 1, 3, 4, 5, 2 };
//
//		System.out.println("\n  Heap Sort\n---------------\n");
//		System.out.println("\n  Unsorted Array\n\n");
//		for (i = 0; i < arr.length; i++)
//			System.out.print(" " + arr[i]);
//		
//		System.out.println("\n\n");
//		int  y  = 0;
//		for (i = arr.length; i >1; i--){
//			fnSortHeap(arr,i-1);
//			for(int x:arr)
//			System.out.print(x+",");
//			
//			System.out.print("\n");
//		}
//		System.out.print(arr[0]+",");
//		System.out.println("\n  Sorted array\n---------------\n\n");
//		for (i = 0; i < arr.length; i++)
//			System.out.print(" " + arr[i]);
//	}
//
//	public static void fnSortHeap(int array[], int arr_ubound) {
//		int i, o;
//		int lChild=0, rChild=0, mChild=0, root=0, temp=0;
//		root = (arr_ubound - 1) / 2;
//  		for (o = 0; o <=root; o++) {
//			for (i = 0; i <=root; i++) {
//				lChild = (2 * i) + 1;
//				rChild = (2 * i) + 2;
// 				if ((lChild <= arr_ubound) && (rChild <= arr_ubound)) {
//					if (array[rChild] <= array[lChild])
//						mChild = rChild;
//					else
//						mChild = lChild;
//				} else {
//					if (rChild > arr_ubound)
//						mChild = lChild;
//					else
//						mChild = rChild;
//				}
// 				if (array[i] < array[mChild]) {
//					temp = array[i];
//					array[i] = array[mChild];
//					array[mChild] = temp;
//				}
//				
//			}
//		}
// 		temp = array[0];
//		array[0] = array[arr_ubound];
//		array[arr_ubound] = temp;
//        
//		return;
//	}
//}